#!/usr/bin/env php
<?php

/*
 * This file is part of DOM-ORM.
 *
 * (c) Erik PÃ¶hler <info@erikpoehler.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

error_reporting(E_ALL & ~E_DEPRECATED & ~E_USER_DEPRECATED);

set_error_handler(static function ($severity, $message, $file, $line) {
    if ($severity & error_reporting()) {
        throw new ErrorException($message, 0, $severity, $file, $line);
    }
});

$possibleFiles = [__DIR__ . '/../../autoload.php', __DIR__ . '/../autoload.php', __DIR__ . '/vendor/autoload.php'];
$file = current(array_filter($possibleFiles, 'file_exists'));

if ($file === null) {
    throw new RuntimeException('Unable to locate autoload.php file.');
}

require_once $file;

use DOM\ORM\Command\Backup;
use DOM\ORM\Command\Diagnose;
use DOM\ORM\Command\Export;
use DOM\ORM\Command\Import;
use DOM\ORM\Command\Init;
use DOM\ORM\Command\Validate;
use Silly\Application;
use Symfony\Component\Console\Output\ConsoleOutputInterface;

$app = new Application('DOM-ORM CLI Tool', '0.1.0');

$app->command('list', function (ConsoleOutputInterface $output) {
    $output->writeln(sprintf('DOM-ORM <fg=green>%s</>', '1.0.0'));
    $output->writeln('Available commands:');
    $output->writeln('<fg=green>backup</>           Backup the database.');
    $output->writeln('<fg=green>diagnose</>         Diagnose the database.');
    $output->writeln('<fg=green>export</>           Export the database.');
    $output->writeln('<fg=green>import</>           Import into the database.');
    $output->writeln('<fg=green>init</>             Initialize the database');
    $output->writeln('<fg=green>list</>             List commands');
    $output->writeln('<fg=green>schema-validate</>  Validate the database schema.');
});

$app->command('init', function (ConsoleOutputInterface $output) {
    $output->writeln('Initializing database...');
    Init::run();
    $output->writeln('Done.');
});

$app->command('backup', function (ConsoleOutputInterface $output) {
    $output->writeln('Creating a database backup...');
    Backup::run();
    $output->writeln('Done.');
});

$app->command('schema-validate', function (ConsoleOutputInterface $output) {
    $output->writeln('Validating database against schema...');
    Validate::run();
    $output->writeln('Done.');
});

$app->command('import [file]', function ($file, ConsoleOutputInterface $output) {
    $output->writeln('Importing into database...');
    Import::run();
    $output->writeln('Done.');
});

$app->command('export [file] [--xml] [--yaml] [--json] [--php]', function ($file, $xml, $yaml, $json, $php, ConsoleOutputInterface $output) {
    $output->writeln('Exporting database...');
    Export::run($file, $xml, $yaml, $json, $php);
    $output->writeln('Done.');
});

$app->command('diagnose', function (ConsoleOutputInterface $output) {
    $output->writeln('Diagnose database...');
    Diagnose::run();
});

// $app->setDefaultCommand('list');
$app->run();

__HALT_COMPILER();
